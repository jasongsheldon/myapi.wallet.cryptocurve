const aes256 = require('aes256');
const bip39 = require('bip39');
const sha256 = require('sha256');
const crypto = require('crypto-browserify')

String.prototype.hexEncode = function(){
    var hex, i;
    var result = "";
    for (i=0; i<this.length; i++) {
        hex = this.charCodeAt(i).toString(16);
        result += ("000"+hex).slice(-4);
    }
    return result
}
String.prototype.hexDecode = function(){
    var j;
    var hexes = this.match(/.{1,4}/g) || [];
    var back = "";
    for(j = 0; j<hexes.length; j++) {
        back += String.fromCharCode(parseInt(hexes[j], 16));
    }

    return back;
}

function decrypt(text,seed){
  var decipher = crypto.createDecipher('aes-256-cbc', seed)
  var dec = decipher.update(text,'base64','utf8')
  dec += decipher.final('utf8');
  return dec;
}

const e = "006a005a0047006f00570065005800660068004d002b004100660071006b0079004b004f00720068004d0043006a002f0034007300390030005800540070004b004c0067006a00380057004c0032005100790056003100330033006e00300071007400530050007a0046006800440067003900420075006a0072004e004700610048002b003600590037007a004d00330072004a004e006b0047004d0031003500390057006600670046006400490045002f004200330077003000610032006c006c0059004b0072006400520047004f004b00330066006b004f0045007a00430057004d004a0048006c00510053002f0074006b00380069006c003100740053006b00680075006f007500460059004f00780052006b007200490079002f0053002b0078007a005200370049004e007a005700660041005900650050004a00420036006100790041004300780069006f002f0077004800320036006e00530054005100410077002f0072004b0072007700580042004b004c0053003700710069007a0050005100380046004100730036006a0052005100760054005600690077004a0031006e0053004f004c003500410041004e006e0068003600440074006a004100510070003100390075004d0037002f0079003200530050003700340069002f0034006a006300320035007900660048004b00540046004b00560035005200670043002f0036006a0056004f006200720068003900630067005a0047007500310050005a005000300071006100720066004d0063005300380073002b0034007a006d0054007a006e0052006f003100780054006e004d0031007300540041006d0039004a006e005200720071006600580034006b006300760066002f0032002f0076007200360063007100520079006c0059006200500062006900760055004b0074004e00420077006a007a0044005900740056004b0054002b006d0034007000410061005300370063004f004f005900480055004600550073004a005a007a006d00690038004c00320067006b0043002b003700510053004b0037002b004d007a004e00430037006e006f0043007700430063006f006a00630044005400700078006a00640037003300730031003100530069006d00540050003400650035004400480064005500310051007000690064004800680075004b0053006400360039006d006f0079004b00710059003000710068004b0044006e006400710045006c0048006100570052003500340056006e003300510054006500440062002f007200320074007500520078006b00380067004e0062004e0033006d004500580057005000490035006500750041007300460068005500490033007400660043006e0076007600420069007700300045006b0063004700570043006d0077006d006200550069004400590057003500360063005a0079006e0037006100330071003900740065006b004100640075003600740050004f00360048007400750074004f0031005a0051006c004d00780072006b0051005300690049005a00370062003300610059006b0041006a006c0047004d00730065004300520064004f002b0071004e004d004b00620041006c00420058006d00540037004d004a006b004d004500420073004c0047006900740049007300310039002f006c00410062006c0066006e003300770042004b0050003500360074004c006b006900570049002f006f0055006e005400530057006e0038002f00560057007a0039006a0079006800700038004e0052005200640036006800310036004a007a0047007a00760076004d004a004c00580050006e0048004200580069007700670043002f0037005a00630035004e003000660071006e0033007900650039005a007500410054004600320066004a007200770046007900510042003500630062004a002b00430038002f006d0031004b005a00380034004300470050006100750041005800790072004e00340061004900510045007a00760062006c004a00490056004200390035004500560066004e005100450057004f00430047005300630049006b007400580053006d00750065002b003600530057006e0056006a004200490045004900790039002b004e00300061006b00760078006b002b006a005a0078004b004c0078006e0070004e0075004700430043007a00750039004a005a004a0047007000490039004c007300390064003900520076006b00420065003500550045003800580062005600530063005600550049004c00420043005800610053006300510074006e00770051006d006b006200500048004b00420058006c005700790066007400320047003900410053004900580037006300720075004500660065004e0056006b005a00580059005a006f0058002b0058006f003d"
const m = "0063006f007500630068002000740069006d0065002000670072006f007700200063006f00720065002000760061006c007600650020006600610074006800650072002000700061006c0061006300650020006c0075006d00620065007200200073006500650064002000700061007300730020007300680065006400200067006900720061006600660065"
const t = 1525672428939
const s = "6c92f5a7e5dceb218196e2a28bdfbac6778ba8336859d931f75fab23884a6566"


const dMnemonic = m.hexDecode()
const dEncrypted = e.hexDecode()
const dTime = t
const dSignature = s

const sig = {
  e: e,
  m: m,
  t: t
}
const dSeed = JSON.stringify(sig)
const compareSignature = sha256(dSeed)

if (compareSignature !== dSignature) {

}
const payload = decrypt(dEncrypted, dMnemonic)
var unencrypted = null
try {
   unencrypted = JSON.parse(payload)
} catch (ex) {

}
console.log(unencrypted)
